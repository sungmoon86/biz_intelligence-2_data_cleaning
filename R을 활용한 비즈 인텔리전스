# 데이터 처리
# Chapter 2 - Data Cleaning

message("Contents : 검사를 위해 데이터 요약하기, 결함 데이터 찾아 수정하기,
        분석 목적에 맞도록 데이터 형태 가공하기, 문자열 데이터를 표준형으로 가공하기")


# Summarizing your Data for Inspection
setwd("C:/Users/sunahn/Desktop/R data")
bike <- read.csv("Ch2_raw_bikeshare_data.csv",
                 stringsAsFactors = FALSE)
#문자가 들어있는 경우, stringasfactor=F로 해줘야 문자가 아닌 FACTOR로 인식한다. 
str(bike)

# 결함 데이터 찾아서 수정하기
# - 강력한 패키지 : stringr

# Missing values, 결측치 
table(is.na(bike)) # 전반적으로 NA 값이 있는지 확인한ㄷ

if(!require("stringr")) install.packages("stringr")
suppressMessages(suppressWarnings(library(stringr)))
str_detect(bike, "NA")
table(is.na(bike$sources))다 

# Erroneous values (오류값 수정)
bad_data <- str_subset(bike$humidity, "[a-z A-Z]")
# "[a-z A-Z]"는 모든 영어 소문자와 대문자를 지칭하는 것이다.
# 여기서는 모든 문자열이 있는 것을 찾아서 부분을 뽑았다.

location <- str_detect(bike$humidity, bad_data)
bike[location, ]

# Fixing flaws in datasets (결함 데이터 수정하기)
bike$humidity <- str_replace_all(bike$humidity, bad_data, "61")
bike[location, ]


#  Converting Inputs to Data Types Suited for Analysis
# (분석 목적에 맞게 데이터 형태 가공하기)

# Converting between data types
bike$humidity <- as.numeric(bike$humidity)

bike$holiday <- factor(bike$holiday, levels = c(0, 1),
                       labels = c("no", "yes"))
bike$workingday <- factor(bike$workingday, levels = c(0, 1),
                          labels = c("no", "yes"))
# 사람이 인식할 수 있도록 범주형을 factor로 변환해보자 

bike$season <- factor(bike$season, levels = c(1, 2, 3, 4),
                      labels = c("spring", "summer",
                                 "fall", "winter"),
                      ordered = TRUE )

bike$weather <- factor(bike$weather, levels = c(1, 2, 3, 4),
                      labels = c("clr_part_cloud",
                                 "mist_cloudy",
                                 "lt_rain_snow",
                                 "hvy_rain_snow"),
                      ordered = TRUE )
str(bike)

# Date and time conversions (날짜변환, 까다로움, 패키지: lubridate 필요함) 
if(!require("lubridate")) install.packages("lubridate")
suppressMessages(suppressWarnings(library(lubridate)))
bike$datetime <- mdy_hm(bike$datetime) ##mdy 함수는 연월일로 변환해줌 
str(bike)

#
## Adapting String Variables to a Standard
unique(bike$sources) # 총 몇개의 광고 출처가 있을까??

bike$sources <- tolower(bike$sources) ## 모두 소문자로 변환한다 
bike$sources <- str_trim(bike$sources) ##  모든 공백을 제거하라
na_loc <- is.na(bike$sources)
bike$sources[na_loc] <- "unknown" # NA값은 unknown으로 바꾸어주라
unique(bike$sources)



# The power of seven, plus or minus two (datacombine 패키지로 전환하기!!!) 
if(!require("DataCombine")) install.packages("DataCombine")
suppressMessages(suppressWarnings(library(DataCombine)))
web_sites <- "(www.[a-z]*.[a-z]*)" # 인터넷 주소를 모두 website 형태로 변형한다. 
current <- unique(str_subset(bike$sources, web_sites))
# web 사이트에 해당하는 변수를 모두 current 객체에 해당시킨다 
replace <- rep("web", length(current)) # current를 대체할 web을 만들고 replace라는 
# 객체에 저장한다. length() 함수는 web 대체물이 정확히 몇 개 필요한지 알려준당
replacements <- data.frame(from = current, to = replace)
# current 변수와 replace 변수를 벡터로 간주하는 replacements 라는 데이터 프레임을 만든다 

bike <- FindReplace(data = bike, Var = "sources", replacements,
                    from = "from", to = "to", exact = FALSE)


unique(bike$sources)

bike$sources <- as.factor(bike$sources) ## factor로 변환시킨다 

----------------------------------------------------------------------------
  

# Data ready for analysis
str(bike)

write.csv(bike, "Ch2_clean_bike_sharing_data.csv",
           row.names = FALSE)
